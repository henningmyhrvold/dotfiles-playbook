---
- name: Ensure npm/npx is available
  become: true
  community.general.pacman:
    name: npm
    state: present
  tags: [claude_mcp_python_repl]

- name: Ensure Python 3 is installed
  become: true
  community.general.pacman:
    name: python
    state: present
  tags: [claude_mcp_python_repl]

- name: Ensure pip is installed
  become: true
  community.general.pacman:
    name: python-pip
    state: present
  tags: [claude_mcp_python_repl]

- name: Verify npx is in PATH
  ansible.builtin.command: which npx
  register: npx_check
  changed_when: false
  failed_when: npx_check.rc != 0
  tags: [claude_mcp_python_repl]

- name: Verify Python is available
  ansible.builtin.command: "{{ python_repl_executable }} --version"
  register: python_check
  changed_when: false
  failed_when: python_check.rc != 0
  tags: [claude_mcp_python_repl]

- name: Check if required Python packages are installed
  ansible.builtin.command: "{{ python_repl_executable }} -c 'import {{ item }}'"
  register: package_check
  changed_when: false
  failed_when: false
  loop: "{{ python_repl_required_packages }}"
  when: python_repl_verify_packages | bool
  tags: [claude_mcp_python_repl]

- name: Display missing Python packages warning
  ansible.builtin.debug:
    msg:
      - "WARNING: Some Python packages are not installed"
      - "Missing packages: {{ package_check.results | selectattr('rc', 'eq', 1) | map(attribute='item') | list | join(', ') }}"
      - ""
      - "Install them with:"
      - "  pip install {{ package_check.results | selectattr('rc', 'eq', 1) | map(attribute='item') | list | join(' ') }}"
      - ""
      - "Or for user install:"
      - "  pip install --user {{ package_check.results | selectattr('rc', 'eq', 1) | map(attribute='item') | list | join(' ') }}"
  when:
    - python_repl_verify_packages | bool
    - package_check.results | selectattr('rc', 'eq', 1) | list | length > 0
  tags: [claude_mcp_python_repl]

- name: Ensure Claude Desktop config directory exists
  become: true
  become_user: "{{ claude_user }}"
  ansible.builtin.file:
    path: "{{ claude_config_dir }}"
    state: directory
    mode: "0755"
  tags: [claude_mcp_python_repl]

- name: Ensure Python working directory exists
  become: true
  become_user: "{{ claude_user }}"
  ansible.builtin.file:
    path: "{{ python_repl_working_dir }}"
    state: directory
    mode: "0755"
  tags: [claude_mcp_python_repl]

- name: Check if Claude Desktop config already exists
  become: true
  become_user: "{{ claude_user }}"
  ansible.builtin.stat:
    path: "{{ claude_config_file }}"
  register: claude_config_stat
  tags: [claude_mcp_python_repl]

- name: Read existing Claude Desktop config
  become: true
  become_user: "{{ claude_user }}"
  ansible.builtin.slurp:
    path: "{{ claude_config_file }}"
  register: claude_config_slurp
  when: claude_config_stat.stat.exists
  tags: [claude_mcp_python_repl]

- name: Try to parse existing config as JSON
  ansible.builtin.set_fact:
    existing_config: "{{ claude_config_slurp.content | b64decode | from_json }}"
  when: claude_config_stat.stat.exists
  register: parse_result
  ignore_errors: true
  tags: [claude_mcp_python_repl]

- name: Display warning for invalid JSON
  ansible.builtin.debug:
    msg:
      - "WARNING: Existing Claude Desktop config contains invalid JSON"
      - "File: {{ claude_config_file }}"
      - "The file will be backed up and replaced with valid configuration"
      - "Backup location: {{ claude_config_file }}.backup-invalid-{{ ansible_date_time.epoch }}"
  when:
    - claude_config_stat.stat.exists
    - parse_result is failed
  tags: [claude_mcp_python_repl]

- name: Backup invalid config file
  become: true
  become_user: "{{ claude_user }}"
  ansible.builtin.copy:
    src: "{{ claude_config_file }}"
    dest: "{{ claude_config_file }}.backup-invalid-{{ ansible_date_time.epoch }}"
    mode: "0644"
    remote_src: true
  when:
    - claude_config_stat.stat.exists
    - parse_result is failed
  tags: [claude_mcp_python_repl]

- name: Set empty config if parsing failed or file doesn't exist
  ansible.builtin.set_fact:
    existing_config: {}
  when: >
    (not claude_config_stat.stat.exists) or
    (parse_result is failed)
  tags: [claude_mcp_python_repl]

- name: Backup existing valid config (if it exists and is valid)
  become: true
  become_user: "{{ claude_user }}"
  ansible.builtin.copy:
    src: "{{ claude_config_file }}"
    dest: "{{ claude_config_file }}.backup-{{ ansible_date_time.epoch }}"
    mode: "0644"
    remote_src: true
  when:
    - claude_backup_config | bool
    - claude_config_stat.stat.exists
    - parse_result is succeeded
  tags: [claude_mcp_python_repl]

- name: Build Python REPL environment variables
  ansible.builtin.set_fact:
    python_repl_env: >-
      {{
        {
          'PYTHONPATH': python_repl_working_dir,
          'PYTHON_BIN': python_repl_executable
        } | combine(python_repl_env_vars | default({}))
      }}
  tags: [claude_mcp_python_repl]

- name: Build Python REPL MCP server configuration
  ansible.builtin.set_fact:
    python_repl_server_config:
      command: "npx"
      args:
        - "-y"
        - "{{ python_repl_server_package }}"
      env: "{{ python_repl_env }}"
  tags: [claude_mcp_python_repl]

- name: Build target configuration (merge with existing)
  ansible.builtin.set_fact:
    target_config: >-
      {{
        (existing_config | default({}))
        | combine(
            {
              'mcpServers': (existing_config.mcpServers | default({}))
              | combine({'python-repl': python_repl_server_config})
            },
            recursive=True
          )
      }}
  tags: [claude_mcp_python_repl]

- name: Write Claude Desktop configuration using template
  become: true
  become_user: "{{ claude_user }}"
  ansible.builtin.template:
    src: claude_desktop_config.json.j2
    dest: "{{ claude_config_file }}"
    mode: "0644"
    backup: false
  register: config_written
  tags: [claude_mcp_python_repl]

- name: Validate JSON syntax
  ansible.builtin.command:
    cmd: "jq empty {{ claude_config_file }}"
  become: true
  become_user: "{{ claude_user }}"
  changed_when: false
  tags: [claude_mcp_python_repl]
