---
- name: Backup original sudoers file for pacman configuration
  ansible.builtin.copy:
    src: /etc/sudoers
    dest: /etc/sudoers.pacman_backup
    owner: root
    mode: "0644"
    remote_src: yes
  become: true
  tags: ['aur']

- name: Allow target user to run pacman without password
  lineinfile:
    path: /etc/sudoers
    line: '{{ target_user }} ALL=(ALL) NOPASSWD: /usr/bin/pacman *'
    validate: /usr/sbin/visudo -cf %s
  become: true
  tags: ['aur']

- name: Install packages from aur_installed_packages list
  kewlfft.aur.aur:
    name: "{{ item }}"
    use: paru
    state: present
  with_items: "{{ aur_installed_packages }}"
  become: true
  become_user: "{{ target_user }}"
  when: aur_installed_packages is defined
  tags: ['aur']

- name: Update repo packages first (faster and reduces AUR work)
  community.general.pacman:
    update_cache: true
    upgrade: true
  become: true

- name: Update AUR packages (retry on transient AUR RPC errors)
  ansible.builtin.command:
    cmd: "paru -Sua --noconfirm --skipreview"
  become: true
  become_user: "{{ target_user }}"
  register: paru_upgrade
  retries: 5
  delay: 10
  until: paru_upgrade.rc == 0 or
         ('there is nothing to do' in (paru_upgrade.stdout | default('')))
  failed_when: >
    (paru_upgrade.rc != 0)
    and ('there is nothing to do' not in (paru_upgrade.stdout | default('')))
    and ('Connection reset by peer' not in (paru_upgrade.stderr | default('')))
    and ('timed out' not in (paru_upgrade.stderr | default('')))
    and ('Temporary failure' not in (paru_upgrade.stderr | default('')))
  changed_when: "'there is nothing to do' not in (paru_upgrade.stdout | default(''))"

- name: Revert sudoers after pacman configuration
  ansible.builtin.copy:
    src: /etc/sudoers.pacman_backup
    dest: /etc/sudoers
    owner: root
    mode: "0644"
    remote_src: yes
    validate: /usr/sbin/visudo -cf %s
  become: true
  tags: ['aur']
