- name: Ensure systemd is the service manager
  ansible.builtin.assert:
    that: ansible_service_mgr == "systemd"
    fail_msg: "This role requires systemd."

- name: Install Thunderbird (if requested)
  ansible.builtin.package:
    name: "{{ thunderbird_packages }}"
    state: present
  when: thunderbird_manage_packages

- name: Install Xvfb (if using virtual display)
  ansible.builtin.package:
    name: "{{ thunderbird_xvfb_package }}"
    state: present
  when: thunderbird_use_xvfb

- name: Check lingering status for {{ thunderbird_user }}
  ansible.builtin.command: "loginctl show-user {{ thunderbird_user }} --property=Linger"
  register: _linger_status
  changed_when: false
  failed_when: false
  become: true
  when: thunderbird_enable_lingering

- name: Enable lingering for {{ thunderbird_user }}
  ansible.builtin.command: "loginctl enable-linger {{ thunderbird_user }}"
  become: true
  when:
    - thunderbird_enable_lingering
    - _linger_status.stdout is not defined or ('Linger=yes' not in _linger_status.stdout)

- name: Ensure user systemd dir exists
  ansible.builtin.file:
    path: "{{ thunderbird_unit_dir }}"
    state: directory
    mode: "0755"
  become: true
  become_user: "{{ thunderbird_user }}"

- name: Install Thunderbird headless user unit
  ansible.builtin.template:
    src: thunderbird-headless.service.j2
    dest: "{{ thunderbird_unit_dir }}/{{ thunderbird_service_name }}"
    mode: "0644"
  become: true
  become_user: "{{ thunderbird_user }}"
  notify: restart thunderbird headless (user)

- name: Reload user systemd daemon
  ansible.builtin.command: "systemctl --user daemon-reload"
  become: true
  become_user: "{{ thunderbird_user }}"
  changed_when: false
  failed_when: false

- name: Enable and start the user service (may fail if no user session)
  ansible.builtin.command: "systemctl --user enable --now {{ thunderbird_service_name }}"
  become: true
  become_user: "{{ thunderbird_user }}"
  register: _enable_start
  failed_when: false
  changed_when: "'Created symlink' in _enable_start.stdout or 'Started' in _enable_start.stdout"

- name: Ensure default.target wants symlink exists (idempotent enable)
  ansible.builtin.file:
    state: link
    src: "{{ thunderbird_unit_dir }}/{{ thunderbird_service_name }}"
    dest: "{{ thunderbird_unit_dir }}/default.target.wants/{{ thunderbird_service_name }}"
  become: true
  become_user: "{{ thunderbird_user }}"
  when: thunderbird_autostart

