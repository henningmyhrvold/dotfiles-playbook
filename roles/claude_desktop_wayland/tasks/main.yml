---
# 0. Build a normalized claude_desktop_users list if it wasn't provided.
#    We derive it from target_user / dotfiles_home (from all.yml),
#    or fall back to ansible_user_id and a guessed /home/<user>.
- name: Derive target user/home for Claude desktop override
  ansible.builtin.set_fact:
    _effective_user: >-
      {{ (claude_desktop_users | length > 0)
         | ternary(claude_desktop_users[0].name,
                   (target_user | default(ansible_user_id))) }}
    _effective_home: >-
      {{ (claude_desktop_users | length > 0)
         | ternary(claude_desktop_users[0].home,
                   (dotfiles_home
                    | default('/home/' + (target_user | default(ansible_user_id)))) ) }}

- name: Normalize claude_desktop_users list
  ansible.builtin.set_fact:
    _claude_users_normalized:
      - name: "{{ _effective_user }}"
        home: "{{ _effective_home }}"

# 1. Find Claude desktop files shipped by the package in /usr/share/applications
- name: Gather Claude desktop entries in system directory
  ansible.builtin.find:
    paths: "{{ claude_desktop_system_dir }}"
    patterns: "{{ claude_desktop_patterns }}"
    file_type: file
  register: _claude_desktop_found

# 2. Flatten to just a list of full paths
- name: Flatten found files
  ansible.builtin.set_fact:
    _claude_desktop_system_files: "{{ _claude_desktop_found.files | map(attribute='path') | list }}"

# 3. Debug if we found nothing
- name: No Claude desktop files found (debug hint)
  ansible.builtin.debug:
    msg: >-
      No system desktop entries found under {{ claude_desktop_system_dir }}
      matching {{ claude_desktop_patterns }}. Nothing to override.
  when: _claude_desktop_system_files | length == 0

# 4. Ensure ~/.local/share/applications exists for the (effective) user
- name: Ensure per-user application dir exists
  ansible.builtin.file:
    path: "{{ item.home }}/.local/share/applications"
    state: directory
    mode: "0755"
    owner: "{{ item.name }}"
    group: "{{ item.name }}"
  loop: "{{ _claude_users_normalized }}"

# 5. Copy each system desktop file to that user's local override dir
- name: Copy each system desktop file to user override location
  ansible.builtin.copy:
    src: "{{ item.0 }}"
    dest: "{{ item.1.home }}/.local/share/applications/{{ item.0 | basename }}"
    mode: "0644"
    owner: "{{ item.1.name }}"
    group: "{{ item.1.name }}"
    remote_src: true
  loop: "{{ _claude_desktop_system_files | product(_claude_users_normalized) | list }}"
  when: _claude_desktop_system_files | length > 0

# 6. Rewrite Exec= line with Wayland flags
- name: Patch Exec= in per-user desktop overrides (regex)
  vars:
    _src_base: "{{ item.0 | basename }}"
    _dst_file: "{{ item.1.home }}/.local/share/applications/{{ _src_base }}"
    _wanted_exec: "{{ claude_desktop_per_file_exec.get(_src_base, claude_desktop_exec) }}"
  ansible.builtin.replace:
    path: "{{ _dst_file }}"
    regexp: '^Exec=.*$'
    replace: "Exec={{ _wanted_exec }}"
  loop: "{{ _claude_desktop_system_files | product(_claude_users_normalized) | list }}"
  when: _claude_desktop_system_files | length > 0

# 7. Ensure Name= exists (if missing)
- name: Ensure Name= exists (if missing)
  vars:
    _src_base: "{{ item.0 | basename }}"
    _dst_file: "{{ item.1.home }}/.local/share/applications/{{ _src_base }}"
  ansible.builtin.lineinfile:
    path: "{{ _dst_file }}"
    regexp: '^Name='
    line: "Name=Claude"
    insertafter: '^\[Desktop Entry\]'
    owner: "{{ item.1.name }}"
    group: "{{ item.1.name }}"
  loop: "{{ _claude_desktop_system_files | product(_claude_users_normalized) | list }}"
  when:
    - claude_desktop_rename_entry
    - _claude_desktop_system_files | length > 0

# 8. Add suffix " (Wayland)" to Name=
- name: Add Wayland suffix to Name=
  vars:
    _src_base: "{{ item.0 | basename }}"
    _dst_file: "{{ item.1.home }}/.local/share/applications/{{ _src_base }}"
  ansible.builtin.replace:
    path: "{{ _dst_file }}"
    regexp: '^Name=(.*?)(\s*\(Wayland\))?$'
    replace: "Name=\\1{{ claude_desktop_name_suffix }}"
    owner: "{{ item.1.name }}"
    group: "{{ item.1.name }}"
  loop: "{{ _claude_desktop_system_files | product(_claude_users_normalized) | list }}"
  when:
    - claude_desktop_rename_entry
    - _claude_desktop_system_files | length > 0

